- hosts: all
  tasks:
    - name: Fetch artifact
      get_url:
        url: "{{ item.url }}"
        dest: "{{ zuul.project.src_dir }}/{{ image_operating_system }}-kube-{{ kube_tag }}.qcow2"
      register: fetch_artifact
      loop: "{{ zuul.artifacts }}"
      when:
        - item.name is defined
        - item.name == "{{ image_operating_system }}-kube-{{ kube_tag }}.qcow2"

    - name: Download image
      get_url:
        url: "{{ image_url }}"
        dest: "{{ zuul.project.src_dir }}/{{ image_operating_system }}-kube-{{ kube_tag }}.qcow2"
      register: fetch_artifact
      retries: 60
      delay: 10
      until: fetch_artifact is succeeded
      when:
        - image_url is defined

    - name: Install DevStack
      ansible.builtin.include_role:
        name: orchestrate-devstack

    - name: Install "kubectl"
      ansible.builtin.shell: ./hack/setup-kubectl.sh
      args:
        chdir: "{{ zuul.project.src_dir }}"

    - name: Install Helm
      ansible.builtin.shell: ./hack/setup-helm.sh
      args:
        chdir: "{{ zuul.project.src_dir }}"

    - name: Install Docker
      ansible.builtin.shell: ./hack/setup-docker.sh
      args:
        chdir: "{{ zuul.project.src_dir }}"

    - name: Install KinD
      ansible.builtin.shell: ./hack/setup-kind.sh
      args:
        chdir: "{{ zuul.project.src_dir }}"

    - name: Install CAPI/CAPO
      ansible.builtin.shell: ./hack/setup-capo.sh
      args:
        chdir: "{{ zuul.project.src_dir }}"

    - name: Install "magnum-cluster-api"
      ansible.builtin.shell: |
        pip install -U setuptools pip python-magnumclient
        {{ ansible_env.HOME }}/.local/bin/pip3 install -e .
      args:
        chdir: "{{ zuul.project.src_dir }}"

    - name: Restart Magnum to pick up new driver
      ansible.builtin.shell: sudo systemctl restart devstack@magnum-{api,cond}

    - shell: "./hack/run-integration-tests.sh"
      args:
        chdir: "{{ zuul.project.src_dir }}"
      environment:
        IMAGE_OS: "{{ image_operating_system }}"
        OS_DISTRO: "{{ image_os_distro }}"
        KUBE_TAG: "{{ kube_tag }}"
        NODE_COUNT: 2
        BUILD_NEW_IMAGE: "{{ fetch_artifact.changed }}"
        NETWORK_DRIVER: "{{ network_driver }}"

    - name: Copy Sonobuoy results to output folder
      copy:
        src: "{{ zuul.project.src_dir }}/sonobuoy-results.tar.gz"
        dest: "{{ zuul_output_dir }}/artifacts/sonobuoy-results.tar.gz"
        remote_src: true
