#!/usr/bin/env python3

# Copyright (c) 2025 VEXXHOST, Inc.
# SPDX-License-Identifier: Apache-2.0

import os
import urllib.request

SNAPSHOT_CONTROLLER_CSI_TAGS = ["v7.0.2", "v8.2.1"]
SNAPSHOT_CONTROLLER_CSI_REPO = "kubernetes-csi/external-snapshotter"

# Files to sync from upstream repository
MANIFEST_FILES = {
    # RBAC
    "deploy/kubernetes/snapshot-controller/rbac-snapshot-controller.yaml": "rbac-snapshot-controller.yaml",
    # CRDs
    "client/config/crd/snapshot.storage.k8s.io_volumesnapshotclasses.yaml": "snapshot.storage.k8s.io_volumesnapshotclasses.yaml",  # noqa E501
    "client/config/crd/snapshot.storage.k8s.io_volumesnapshotcontents.yaml": "snapshot.storage.k8s.io_volumesnapshotcontents.yaml",  # noqa E501
    "client/config/crd/snapshot.storage.k8s.io_volumesnapshots.yaml": "snapshot.storage.k8s.io_volumesnapshots.yaml",
}


def sync_file(source_url: str, target_path: str, version_tag: str) -> None:
    """Download a file from source_url and save it to target_path."""
    os.makedirs(os.path.dirname(target_path), exist_ok=True)
    print(f"Downloading {source_url} to {target_path}")
    try:
        urllib.request.urlretrieve(source_url, target_path)
        print(f"Successfully downloaded {os.path.basename(target_path)}")
    except urllib.error.HTTPError as e:
        print(f"Error downloading {source_url}: {e}")
        raise


def main():
    # Set target directory relative to script location
    script_dir = os.path.dirname(os.path.realpath(__file__))
    base_dir = os.path.join(
        script_dir, "..", "magnum_cluster_api", "manifests", "snapshot-controller-csi"
    )

    for tag in SNAPSHOT_CONTROLLER_CSI_TAGS:
        print(f"\nSyncing manifests for version {tag}...")
        raw_url = f"https://raw.githubusercontent.com/{SNAPSHOT_CONTROLLER_CSI_REPO}/refs/tags/{tag}"
        target_version_dir = os.path.join(base_dir, tag)

        # Ensure version directory exists
        os.makedirs(target_version_dir, exist_ok=True)

        # Sync each manifest
        for source_path, target_name in MANIFEST_FILES.items():
            source_url = f"{raw_url}/{source_path}"
            target_path = os.path.join(target_version_dir, target_name)
            try:
                sync_file(source_url, target_path, tag)
            except urllib.error.HTTPError as e:
                print(f"Failed to download {target_name} for version {tag}")
                if e.code == 404:
                    continue  # Try the next file
                raise

    print("\nSnapshot controller manifests sync completed!")


if __name__ == "__main__":
    main()
